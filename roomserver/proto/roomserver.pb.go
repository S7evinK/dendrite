// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.12.4
// source: roomserver.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_roomserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_roomserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_roomserver_proto_rawDescGZIP(), []int{0}
}

var File_roomserver_proto protoreflect.FileDescriptor

var file_roomserver_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x0b,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9e, 0x05, 0x0a,
	0x0b, 0x52, 0x6f, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x19,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x73,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x6f, 0x6f,
	0x6d, 0x73, 0x12, 0x1c, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x17, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x20, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6d, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x25, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x6f, 0x6f, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d,
	0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_roomserver_proto_rawDescOnce sync.Once
	file_roomserver_proto_rawDescData = file_roomserver_proto_rawDesc
)

func file_roomserver_proto_rawDescGZIP() []byte {
	file_roomserver_proto_rawDescOnce.Do(func() {
		file_roomserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_roomserver_proto_rawDescData)
	})
	return file_roomserver_proto_rawDescData
}

var file_roomserver_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_roomserver_proto_goTypes = []interface{}{
	(*EmptyResponse)(nil),                   // 0: roomserver.EmptyResponse
	(*ServerBannedFromRoomRequest)(nil),     // 1: query.ServerBannedFromRoomRequest
	(*SharedUsersRequest)(nil),              // 2: query.SharedUsersRequest
	(*RoomsForUserRequest)(nil),             // 3: query.RoomsForUserRequest
	(*PublishedRoomsRequest)(nil),           // 4: query.PublishedRoomsRequest
	(*RoomVersionForRoomRequest)(nil),       // 5: query.RoomVersionForRoomRequest
	(*RoomVersionCapabilitiesRequest)(nil),  // 6: query.RoomVersionCapabilitiesRequest
	(*ServerAllowedToSeeEventRequest)(nil),  // 7: query.ServerAllowedToSeeEventRequest
	(*ServerBannedFromRoomResponse)(nil),    // 8: query.ServerBannedFromRoomResponse
	(*SharedUsersResponse)(nil),             // 9: query.SharedUsersResponse
	(*RoomsForUserResponse)(nil),            // 10: query.RoomsForUserResponse
	(*PublishedRoomsResponse)(nil),          // 11: query.PublishedRoomsResponse
	(*RoomVersionForRoomResponse)(nil),      // 12: query.RoomVersionForRoomResponse
	(*RoomVersionCapabilitiesResponse)(nil), // 13: query.RoomVersionCapabilitiesResponse
	(*ServerAllowedToSeeEventResponse)(nil), // 14: query.ServerAllowedToSeeEventResponse
}
var file_roomserver_proto_depIdxs = []int32{
	1,  // 0: roomserver.RoomService.QueryServerBannedFromRoom:input_type -> query.ServerBannedFromRoomRequest
	2,  // 1: roomserver.RoomService.QuerySharedUsers:input_type -> query.SharedUsersRequest
	3,  // 2: roomserver.RoomService.QueryRoomsForUser:input_type -> query.RoomsForUserRequest
	4,  // 3: roomserver.RoomService.QueryPublishedRooms:input_type -> query.PublishedRoomsRequest
	5,  // 4: roomserver.RoomService.QueryRoomVersionForRoom:input_type -> query.RoomVersionForRoomRequest
	6,  // 5: roomserver.RoomService.QueryRoomVersionCapabilities:input_type -> query.RoomVersionCapabilitiesRequest
	7,  // 6: roomserver.RoomService.QueryServerAllowedToSeeEvent:input_type -> query.ServerAllowedToSeeEventRequest
	8,  // 7: roomserver.RoomService.QueryServerBannedFromRoom:output_type -> query.ServerBannedFromRoomResponse
	9,  // 8: roomserver.RoomService.QuerySharedUsers:output_type -> query.SharedUsersResponse
	10, // 9: roomserver.RoomService.QueryRoomsForUser:output_type -> query.RoomsForUserResponse
	11, // 10: roomserver.RoomService.QueryPublishedRooms:output_type -> query.PublishedRoomsResponse
	12, // 11: roomserver.RoomService.QueryRoomVersionForRoom:output_type -> query.RoomVersionForRoomResponse
	13, // 12: roomserver.RoomService.QueryRoomVersionCapabilities:output_type -> query.RoomVersionCapabilitiesResponse
	14, // 13: roomserver.RoomService.QueryServerAllowedToSeeEvent:output_type -> query.ServerAllowedToSeeEventResponse
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_roomserver_proto_init() }
func file_roomserver_proto_init() {
	if File_roomserver_proto != nil {
		return
	}
	file_query_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_roomserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_roomserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_roomserver_proto_goTypes,
		DependencyIndexes: file_roomserver_proto_depIdxs,
		MessageInfos:      file_roomserver_proto_msgTypes,
	}.Build()
	File_roomserver_proto = out.File
	file_roomserver_proto_rawDesc = nil
	file_roomserver_proto_goTypes = nil
	file_roomserver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoomServiceClient is the client API for RoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoomServiceClient interface {
	QueryServerBannedFromRoom(ctx context.Context, in *ServerBannedFromRoomRequest, opts ...grpc.CallOption) (*ServerBannedFromRoomResponse, error)
	QuerySharedUsers(ctx context.Context, in *SharedUsersRequest, opts ...grpc.CallOption) (*SharedUsersResponse, error)
	QueryRoomsForUser(ctx context.Context, in *RoomsForUserRequest, opts ...grpc.CallOption) (*RoomsForUserResponse, error)
	QueryPublishedRooms(ctx context.Context, in *PublishedRoomsRequest, opts ...grpc.CallOption) (*PublishedRoomsResponse, error)
	QueryRoomVersionForRoom(ctx context.Context, in *RoomVersionForRoomRequest, opts ...grpc.CallOption) (*RoomVersionForRoomResponse, error)
	QueryRoomVersionCapabilities(ctx context.Context, in *RoomVersionCapabilitiesRequest, opts ...grpc.CallOption) (*RoomVersionCapabilitiesResponse, error)
	QueryServerAllowedToSeeEvent(ctx context.Context, in *ServerAllowedToSeeEventRequest, opts ...grpc.CallOption) (*ServerAllowedToSeeEventResponse, error)
}

type roomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomServiceClient(cc grpc.ClientConnInterface) RoomServiceClient {
	return &roomServiceClient{cc}
}

func (c *roomServiceClient) QueryServerBannedFromRoom(ctx context.Context, in *ServerBannedFromRoomRequest, opts ...grpc.CallOption) (*ServerBannedFromRoomResponse, error) {
	out := new(ServerBannedFromRoomResponse)
	err := c.cc.Invoke(ctx, "/roomserver.RoomService/QueryServerBannedFromRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) QuerySharedUsers(ctx context.Context, in *SharedUsersRequest, opts ...grpc.CallOption) (*SharedUsersResponse, error) {
	out := new(SharedUsersResponse)
	err := c.cc.Invoke(ctx, "/roomserver.RoomService/QuerySharedUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) QueryRoomsForUser(ctx context.Context, in *RoomsForUserRequest, opts ...grpc.CallOption) (*RoomsForUserResponse, error) {
	out := new(RoomsForUserResponse)
	err := c.cc.Invoke(ctx, "/roomserver.RoomService/QueryRoomsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) QueryPublishedRooms(ctx context.Context, in *PublishedRoomsRequest, opts ...grpc.CallOption) (*PublishedRoomsResponse, error) {
	out := new(PublishedRoomsResponse)
	err := c.cc.Invoke(ctx, "/roomserver.RoomService/QueryPublishedRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) QueryRoomVersionForRoom(ctx context.Context, in *RoomVersionForRoomRequest, opts ...grpc.CallOption) (*RoomVersionForRoomResponse, error) {
	out := new(RoomVersionForRoomResponse)
	err := c.cc.Invoke(ctx, "/roomserver.RoomService/QueryRoomVersionForRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) QueryRoomVersionCapabilities(ctx context.Context, in *RoomVersionCapabilitiesRequest, opts ...grpc.CallOption) (*RoomVersionCapabilitiesResponse, error) {
	out := new(RoomVersionCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/roomserver.RoomService/QueryRoomVersionCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomServiceClient) QueryServerAllowedToSeeEvent(ctx context.Context, in *ServerAllowedToSeeEventRequest, opts ...grpc.CallOption) (*ServerAllowedToSeeEventResponse, error) {
	out := new(ServerAllowedToSeeEventResponse)
	err := c.cc.Invoke(ctx, "/roomserver.RoomService/QueryServerAllowedToSeeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServiceServer is the server API for RoomService service.
type RoomServiceServer interface {
	QueryServerBannedFromRoom(context.Context, *ServerBannedFromRoomRequest) (*ServerBannedFromRoomResponse, error)
	QuerySharedUsers(context.Context, *SharedUsersRequest) (*SharedUsersResponse, error)
	QueryRoomsForUser(context.Context, *RoomsForUserRequest) (*RoomsForUserResponse, error)
	QueryPublishedRooms(context.Context, *PublishedRoomsRequest) (*PublishedRoomsResponse, error)
	QueryRoomVersionForRoom(context.Context, *RoomVersionForRoomRequest) (*RoomVersionForRoomResponse, error)
	QueryRoomVersionCapabilities(context.Context, *RoomVersionCapabilitiesRequest) (*RoomVersionCapabilitiesResponse, error)
	QueryServerAllowedToSeeEvent(context.Context, *ServerAllowedToSeeEventRequest) (*ServerAllowedToSeeEventResponse, error)
}

// UnimplementedRoomServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRoomServiceServer struct {
}

func (*UnimplementedRoomServiceServer) QueryServerBannedFromRoom(context.Context, *ServerBannedFromRoomRequest) (*ServerBannedFromRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryServerBannedFromRoom not implemented")
}
func (*UnimplementedRoomServiceServer) QuerySharedUsers(context.Context, *SharedUsersRequest) (*SharedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySharedUsers not implemented")
}
func (*UnimplementedRoomServiceServer) QueryRoomsForUser(context.Context, *RoomsForUserRequest) (*RoomsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRoomsForUser not implemented")
}
func (*UnimplementedRoomServiceServer) QueryPublishedRooms(context.Context, *PublishedRoomsRequest) (*PublishedRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPublishedRooms not implemented")
}
func (*UnimplementedRoomServiceServer) QueryRoomVersionForRoom(context.Context, *RoomVersionForRoomRequest) (*RoomVersionForRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRoomVersionForRoom not implemented")
}
func (*UnimplementedRoomServiceServer) QueryRoomVersionCapabilities(context.Context, *RoomVersionCapabilitiesRequest) (*RoomVersionCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRoomVersionCapabilities not implemented")
}
func (*UnimplementedRoomServiceServer) QueryServerAllowedToSeeEvent(context.Context, *ServerAllowedToSeeEventRequest) (*ServerAllowedToSeeEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryServerAllowedToSeeEvent not implemented")
}

func RegisterRoomServiceServer(s *grpc.Server, srv RoomServiceServer) {
	s.RegisterService(&_RoomService_serviceDesc, srv)
}

func _RoomService_QueryServerBannedFromRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerBannedFromRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).QueryServerBannedFromRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roomserver.RoomService/QueryServerBannedFromRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).QueryServerBannedFromRoom(ctx, req.(*ServerBannedFromRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_QuerySharedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SharedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).QuerySharedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roomserver.RoomService/QuerySharedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).QuerySharedUsers(ctx, req.(*SharedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_QueryRoomsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).QueryRoomsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roomserver.RoomService/QueryRoomsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).QueryRoomsForUser(ctx, req.(*RoomsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_QueryPublishedRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishedRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).QueryPublishedRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roomserver.RoomService/QueryPublishedRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).QueryPublishedRooms(ctx, req.(*PublishedRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_QueryRoomVersionForRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomVersionForRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).QueryRoomVersionForRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roomserver.RoomService/QueryRoomVersionForRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).QueryRoomVersionForRoom(ctx, req.(*RoomVersionForRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_QueryRoomVersionCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomVersionCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).QueryRoomVersionCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roomserver.RoomService/QueryRoomVersionCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).QueryRoomVersionCapabilities(ctx, req.(*RoomVersionCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomService_QueryServerAllowedToSeeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerAllowedToSeeEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServiceServer).QueryServerAllowedToSeeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roomserver.RoomService/QueryServerAllowedToSeeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServiceServer).QueryServerAllowedToSeeEvent(ctx, req.(*ServerAllowedToSeeEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoomService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "roomserver.RoomService",
	HandlerType: (*RoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryServerBannedFromRoom",
			Handler:    _RoomService_QueryServerBannedFromRoom_Handler,
		},
		{
			MethodName: "QuerySharedUsers",
			Handler:    _RoomService_QuerySharedUsers_Handler,
		},
		{
			MethodName: "QueryRoomsForUser",
			Handler:    _RoomService_QueryRoomsForUser_Handler,
		},
		{
			MethodName: "QueryPublishedRooms",
			Handler:    _RoomService_QueryPublishedRooms_Handler,
		},
		{
			MethodName: "QueryRoomVersionForRoom",
			Handler:    _RoomService_QueryRoomVersionForRoom_Handler,
		},
		{
			MethodName: "QueryRoomVersionCapabilities",
			Handler:    _RoomService_QueryRoomVersionCapabilities_Handler,
		},
		{
			MethodName: "QueryServerAllowedToSeeEvent",
			Handler:    _RoomService_QueryServerAllowedToSeeEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "roomserver.proto",
}
